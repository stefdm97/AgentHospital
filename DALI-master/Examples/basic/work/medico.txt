
:- dynamic (ticket_paziente/3).
:- dynamic (stato_medico/1).
:- assert(stato_medico(true)).
:- use_module(library(aggregate)).
:- use_module(library(lists)).

/* Arrivo paziente */

arriva_pazienteE(Id,Priorita):>
	write('Paziente arrivato'),
	now(Timestamp),
	assert(ticket_paziente(Id,Priorita,Timestamp)).


stato_medico :- write('').

/* se la stanza Ã¨ libera */
stato_medicoI :-
	stato_medico(X),
	true == X,
    ticket_paziente(Id,Priorita,Timestamp),
    gestisci_pazientiA.

/* gestione file pazienti */
gestisci_pazientiA:-
    write('Il medico sta gestendo la fila...'), nl,

    ticket_paziente(_,Priorita,_),
    not((ticket_paziente(_,Priorita2,_), Priorita2<Priorita)),
    ticket_paziente(Id,Priorita,Xtime),
    not((ticket_paziente(_,Priorita,Xtime2), Xtime2<Xtime)),

    format('Paziente successivo: ~d', Id), nl,
    retract(stato_medico(true)),
    assertz(stato_medico(false)),
    accettazione_pazienteA(Id).
	
/* Entra il paziente */
accettazione_pazienteA(Id):-
    format('Il paziente ~d puo passare', Id), nl,
    number_chars(Id, App),
    atom_chars(IdString, App),
    atom_concat('paziente', IdString, AgentName),
    messageA(AgentName, send_message(visita_paziente, Me)).

/* Termina visita */
termina_visitaE(Id):>
	number_chars(Id, App),
    atom_chars(IdString, App),
    atom_concat('paziente', IdString, AgentName),
	format('Il paziente ~d e stato visitato.', Id), nl,
	messageA(AgentName, send_message(visita_finita, Me)),
	retract(ticket_paziente(Id,_,_)),
	libera_stanzaA.
	
/*Libera stanza*/
libera_stanzaA:-
	retract(stato_medico(false)),
    assertz(stato_medico(true)),
	write('stanza libera').







